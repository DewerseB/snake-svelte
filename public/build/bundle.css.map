{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Food.svelte",
    "Game.svelte",
    "Snake.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n\timport Food from \"./components/Food.svelte\";\r\nimport Game from \"./components/Game.svelte\";\r\nimport Snake from \"./components/Snake.svelte\";\r\n\r\n\t/**\r\n\t * Game object\r\n\t * .width : width of the game area\r\n\t * .height : height of the game area\r\n\t * .squareSize : length of an in-game square\r\n\t */\r\n\tlet game = {\r\n\t\twidth: 600,\r\n\t\theight: 400,\r\n\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Assigns the same values to the game object to trigger a change in game #key\r\n\t*/\r\n\tfunction gameInit() {\r\n\t\t\r\n\t};\r\n</script>\r\n\r\n<main>\r\n\t<h1>Snake</h1>\r\n\t<!-- Key: remounts everything in #key block whenever game variable changes -->\r\n\r\n\t\t<!-- Game component with game object as a prop -->\r\n\t\t<Game {...game}/>\r\n\t\t<!-- /Game -->\r\n\t\r\n\t<!-- /Key -->\r\n\t<!-- Button to restart the game -->\r\n\r\n\t<!-- /Button -->\r\n</main>\r\n\r\n<style>\r\n\tmain {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t}\r\n</style>",
    "<script>\r\n    // Food props\r\nexport let x=80;\r\nexport let y=80;\r\nexport let size=40;\r\n\r\n\r\n\r\n    // Food image\r\n    let imgSrc = \"./img/mouse.png\";\r\n</script>\r\n\r\n<style>\r\n    .food {\r\n        position: absolute;\r\n    }\r\n    .imgFood {\r\n        height: 100%;\r\n        width: 100%;\r\n    }\r\n</style>\r\n\r\n<!-- Div containing the food -->\r\n<div class=\"food\" style=\"width: {size}px; height: {size}px; left: {x}px; top: {y}px;\"  >\r\n\r\n    <!-- Food image -->\r\n    <img class=\"imgFood\" src={imgSrc} alt=\"mouse\">\r\n    <!-- /Food -->\r\n    \r\n    <!-- /Div -->\r\n</div>\r\n\r\n",
    "<script>\r\n    import Snake from \"./Snake.svelte\";\r\n    import Food from \"./Food.svelte\";\r\n    import {randomPos} from \"./Random.svelte\";\r\n\r\n    // Props of the game\r\n    export let width = 600;\r\n    export let height = 400;\r\n    export let squareSize = 40;  \r\n\r\n\r\n    // Variables of the game\r\n    let score = 0;    \r\n\r\n\r\n\r\n    /**\r\n     * The snake object\r\n     * .body is an array of objects containing every bodypart of the snake, the first element is the head\r\n     * .direction is a string the snake is currently facing (right, left, up, down)\r\n     * .size is the size of the square representing a bodypart\r\n    */\r\n    let snake = {\r\n        body : [{\r\n            x : 80,\r\n            y : 0,\r\n        },{\r\n            x : 40,\r\n            y : 0,\r\n        },{\r\n            x : 0,\r\n            y : 0,\r\n        }],\r\n        direction : \"right\",\r\n        size : squareSize,\r\n        colorSnake : \"green\",\r\n    };\r\n\r\n    /**\r\n     * The food object\r\n     * .x and .y are numbers representing the coordinates of the food\r\n     * .size is the size of the square representing the food\r\n    */\r\n    let food = {\r\n        x : randomPos(width, squareSize),\r\n        y : randomPos(height,squareSize),\r\n        size : squareSize,\r\n        \r\n    }\r\n\r\n    // Game loop to handle the interval of the game -----------------------------------------\r\n\r\n    function gameLoop() {\r\n        \r\n\r\n        \r\n    }\r\n\r\n    // Main functions for the gameloop -------------------------------------------------------\r\n\r\n    /**\r\n     * Moves each snake bodyparts based on the snake direction\r\n     */\r\n    function move() {\r\n        \r\n\r\n        \r\n    }\r\n\r\n    /**\r\n     * Tests if the snake eats food, if so:\r\n     * - increases the score\r\n     * - decreases the timer and restart the gameLoop\r\n     * - creates another food\r\n     * - makes the snake grows\r\n     */\r\n    function eatingTest() {\r\n        \r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Tests if the snake collide with the border or with himself, if so:\r\n     * - sets isLost to true\r\n     * - clears the loop interval\r\n     */\r\n    function losingTest() {\r\n        \r\n\r\n\r\n    }\r\n\r\n\r\n    // Utility functions -------------------------------------------------------\r\n\r\n    /**\r\n     * Tests if 2 rectangles collide\r\n     * @param {Object} rect1 An object with x and y keys\r\n     * @param {Object} rect2 An object with x and y keys\r\n     * @return {Boolean} true if rect1 and rect2 collide\r\n    */\r\n    function collide(rect1, rect2) {\r\n       \r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Generates a food with random x and y positions\r\n     * Recursively calls itself until it creates a food that doesn't collide with the snake\r\n     * @return the food or the function itself\r\n     */\r\n    function getFood() {\r\n       \r\n\r\n\r\n    }\r\n    \r\n    \r\n    // Event listener -------------------------------------------------------\r\n\r\n    function handleKeydown(event) {\r\n        \r\n\r\n\r\n    }\r\n\r\n    // Automaticaly calls the game loop when the component is loaded ----------\r\n\r\n    (() => {\r\n        \r\n    })();\r\n\r\n</script>\r\n\r\n<style>\r\n    section {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n\t.gameArea {\r\n        position: relative;\r\n        border: 1px solid black;\r\n    }\r\n    input:focus {\r\n        outline: none;\r\n    }\r\n    .colorField {\r\n        display: flex;\r\n\r\n    }\r\n    .colorField label {\r\n        margin: 0 1rem 1rem 1rem;\r\n    }\r\n</style>\r\n\r\n<!-- Section game area -->\r\n<section class=\"gameArea\" style=\"width: {width}px; height: {height}px;\">\r\n    <!-- If block to test if the game is not lost -->\r\n\r\n        <!-- Snake component -->\r\n        <Snake {...snake}/>\r\n        <!-- /Snake -->\r\n        <!-- Food component -->\r\n        <Food {...food}/>\r\n        <!-- /Food -->\r\n    <!-- Else game is lost) -->\r\n\r\n       \r\n        \r\n     \r\n           \r\n    \r\n           \r\n       \r\n    \r\n    \r\n\r\n    <!-- /If -->\r\n</section>\r\n<!-- /Section -->\r\n<!-- Section bonus -->\r\n<section>\r\n    <!-- Score display -->\r\n   <p>Score : {score}</p>\r\n    <!-- /Score -->\r\n    <!-- Snake's color picker -->\r\n \r\n    \r\n \r\n       \r\n      \r\n      \r\n      \r\n      \r\n   \r\n  \r\n\r\n\r\n\r\n\r\n\r\n    <!-- /Snake's color picker -->\r\n</section>\r\n<!-- /Section-->\r\n\r\n<!-- Keydown event listener -->\r\n\r\n<!-- /Keydown -->",
    "<script>\r\n    // Snake props\r\n    export let body = [{\r\n        x : 80,\r\n        y : 0,\r\n    },{\r\n        x : 40,\r\n        y : 0,\r\n    },{\r\n        x : 0,\r\n        y : 0,\r\n    }];\r\n    export let direction = \"right\";\r\n    export let size = 40;\r\n    export let colorSnake = \"green\";\r\n</script>\r\n\r\n<style>\r\n    .snake{\r\n        position: absolute;\r\n        border : black solid 1px;\r\n        \r\n    }\r\n    .green{\r\n        background-color: green;\r\n    }\r\n    .yellow{\r\n        background-color: yellow;\r\n    }\r\n    .blue{\r\n        background-color: blue;\r\n    }\r\n    .eye {\r\n        background-color: red;\r\n        height: 25%;\r\n        width: 25%;\r\n        border-radius: 50%;\r\n        position:relative;\r\n    }\r\n    .right{\r\n        transform: rotate(0deg);\r\n    }\r\n    .left {\r\n        transform: rotate(180deg);\r\n    }\r\n    .up {\r\n        transform: rotate(270deg);\r\n    }\r\n    .down {\r\n        transform : rotate(90deg)\r\n    }\r\n</style>\r\n\r\n<!-- Each block to iterate on the snake body -->\r\n{#each body as part, i}\r\n    <!-- If index = 0, display the head of the snake -->\r\n    {#if i === 0}\r\n    <div class=\"snake {colorSnake} {direction}\" style=\"width: {size-1}px; height: {size-1}px; left: {part.x}px; top: {part.y}px; z-index: 20\">\r\n        <div class=\"eye\" style=\"top: {size/5}px; left: {size*5/8}px\">\r\n\r\n        </div>\r\n        <div class=\"eye\" style=\"top: {size*2/5}px; left: {size*5/8}px\">\r\n\r\n        </div>\r\n    </div>\r\n    <!-- Else display the body -->\r\n    {:else}\r\n    <div class=\"snake {colorSnake}\"  style=\"width: {size-1}px; height: {size-1}px; left :{part.x}px; top:{part.y}px; z-index: 10;\">\r\n\r\n    </div>\r\n    {/if}\r\n    <!-- /If -->\r\n{/each}\r\n<!-- /Each -->"
  ],
  "names": [],
  "mappings": "AAyCC,IAAI,cAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,AACpB,CAAC;AChCE,KAAK,eAAC,CAAC,AACH,QAAQ,CAAE,QAAQ,AACtB,CAAC,AACD,QAAQ,eAAC,CAAC,AACN,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,AACf,CAAC;ACsHD,OAAO,cAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,AAC3B,CAAC,AACJ,SAAS,cAAC,CAAC,AACJ,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,AAC3B,CAAC;AChID,qBAAM,CAAC,AACH,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAG,KAAK,CAAC,KAAK,CAAC,GAAG,AAE5B,CAAC,AACD,qBAAM,CAAC,AACH,gBAAgB,CAAE,KAAK,AAC3B,CAAC,AACD,sBAAO,CAAC,AACJ,gBAAgB,CAAE,MAAM,AAC5B,CAAC,AACD,oBAAK,CAAC,AACF,gBAAgB,CAAE,IAAI,AAC1B,CAAC,AACD,IAAI,eAAC,CAAC,AACF,gBAAgB,CAAE,GAAG,CACrB,MAAM,CAAE,GAAG,CACX,KAAK,CAAE,GAAG,CACV,aAAa,CAAE,GAAG,CAClB,SAAS,QAAQ,AACrB,CAAC,AACD,qBAAM,CAAC,AACH,SAAS,CAAE,OAAO,IAAI,CAAC,AAC3B,CAAC,AACD,KAAK,eAAC,CAAC,AACH,SAAS,CAAE,OAAO,MAAM,CAAC,AAC7B,CAAC,AACD,GAAG,eAAC,CAAC,AACD,SAAS,CAAE,OAAO,MAAM,CAAC,AAC7B,CAAC,AACD,KAAK,eAAC,CAAC,AACH,SAAS,CAAG,OAAO,KAAK,CAAC;IAC7B,CAAC"
}